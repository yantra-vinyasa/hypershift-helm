---
apiVersion: v1
kind: Namespace
metadata:
  name: "test-cluster"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hypershift-installer
  namespace: "test-cluster"
---
apiVersion: v1
kind: Secret
metadata:
  name: "test-cluster-sshkey"
  namespace: "test-cluster"
data:
  id_rsa.pub: "c3NoLXJzYSAuLi4K"
type: Opaque
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: capi-provider-role
  namespace: "test-cluster"
rules:
  - apiGroups:
      - agent-install.openshift.io
    resources:
      - agents
    verbs:
      - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hypershift-installer-role
  namespace: "test-cluster-test-cluster"
  annotations:
    helm.sh/hook-weight: "30"
rules:
  - apiGroups: [""]
    resources:
      - services
    verbs:
      - get
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hypershift-installer-binding
  namespace: "test-cluster-test-cluster"
  annotations:
    helm.sh/hook-weight: "30"
subjects:
  - kind: ServiceAccount
    name: hypershift-installer
    namespace: "test-cluster"
roleRef:
  kind: Role
  name: hypershift-installer-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: metal3.io/v1alpha1
kind: BareMetalHost
metadata:
  name: "openshift-worker-0"
  namespace: "test-cluster"
  annotations:
    bmac.agent-install.openshift.io/role: "worker"
    bmac.agent-install.openshift.io/hostname: "openshift-worker-0"
    helm.sh/hook-weight: "15"
  labels:
    infraenvs.agent-install.openshift.io: "worker"
spec:
  bootMode: "UEFI"
  bmc:
    address: "redfish-virtualmedia://10.100.100.100/redfish/v1/Systems/1"
    disableCertificateVerification: true
    credentialsName: "bmc-credentials"
  bootMACAddress: "aa:aa:aa:aa:aa:aa"
  online: true
  rootDeviceHints:
    hctl: "1:0:0:0"
---
apiVersion: metal3.io/v1alpha1
kind: BareMetalHost
metadata:
  name: "openshift-worker-1"
  namespace: "test-cluster"
  annotations:
    bmac.agent-install.openshift.io/role: "worker"
    bmac.agent-install.openshift.io/hostname: "openshift-worker-1"
    helm.sh/hook-weight: "15"
  labels:
    infraenvs.agent-install.openshift.io: "worker"
spec:
  bootMode: "UEFI"
  bmc:
    address: "redfish-virtualmedia://10.100.100.200/redfish/v1/Systems/1"
    disableCertificateVerification: true
    credentialsName: "bmc-credentials"
  bootMACAddress: "bb:bb:bb:bb:bb:bb"
  online: true
  rootDeviceHints:
    hctl: "2:0:0:0"
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: assisted-deployment-pull-secret
  namespace: "test-cluster"
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: pull-secret-store
    kind: SecretStore
  target:
    name: assisted-deployment-pull-secret
    creationPolicy: Owner
  data:
  - secretKey: .dockerconfigjson
    remoteRef:
      key: pull-secret
      property: dockerconfigjson
---
apiVersion: hypershift.openshift.io/v1beta1
kind: HostedCluster
metadata:
  name: "test-cluster"
  namespace: "test-cluster"
  annotations:
    helm.sh/hook-weight: "20"
spec:
  release:
    image: "quay.io/openshift-release-dev/ocp-release:4.12.0-x86_64"
  platform:
    type: "Agent"
    agent:
      agentNamespace: "test-cluster"
  dns:
    baseDomain: "test.com"
  networking:
    clusterNetwork:
    - cidr: 10.128.0.0/14
      hostPrefix: 23
    networkType: OVNKubernetes
    serviceNetwork:
      - cidr: "172.30.0.0/16"
  pullSecret:
    name: assisted-deployment-pull-secret
  sshKey:
    name: "test-cluster-sshkey"
  configuration:
    apiServer:
      servingCerts:
        namedCertificates:
        - names:
          - xxx.example.com
          - yyy.example.com
          servingCertificate:
            name: my-serving-cert
  services:
    - service: APIServer
      servicePublishingStrategy:
        type: LoadBalancer
        loadBalancer:
          hostname: "api.test-cluster.test.com"
    - service: OAuthServer
      servicePublishingStrategy:
        type: Route
    - service: OIDC
      servicePublishingStrategy:
        type: Route
    - service: Konnectivity
      servicePublishingStrategy:
        type: Route
    - service: Ignition
      servicePublishingStrategy:
        type: Route
    - service: OVNSbDb
      servicePublishingStrategy:
        type: Route
  olmCatalogPlacement: "guest"
---
apiVersion: agent-install.openshift.io/v1beta1
kind: InfraEnv
metadata:
  name: "worker"
  namespace: "test-cluster"
  annotations:
    helm.sh/hook-weight: "10"
spec:
  osImageVersion: "4.12"
  sshAuthorizedKey: "ssh-rsa ..."
  pullSecretRef:
    name: assisted-deployment-pull-secret
  nmStateConfigLabelSelector:
    matchLabels:
      nmstate-cluster: "worker"
  additionalNTPSources:
    - pool.ntp.org
  proxy:
    httpProxy: http://example.com:3128
    httpsProxy: http://example.com:3128
    noProxy: 10.100.100.0/24
---
apiVersion: agent-install.openshift.io/v1beta1
kind: NMStateConfig
metadata:
  name: "openshift-worker-0"
  namespace: "test-cluster"
  annotations:
    helm.sh/hook-weight: "5"
  labels:
    nmstate-cluster: "worker"
spec:
  config:
    interfaces:
    - ipv4:
        dhcp: true
        enabled: true
      ipv6:
        enabled: false
      mac-address: aa:aa:aa:aa:aa:aa
      name: eno1
      state: up
      type: ethernet
  interfaces:
    - name: "eno1"
      macAddress: "aa:aa:aa:aa:aa:aa"
---
apiVersion: agent-install.openshift.io/v1beta1
kind: NMStateConfig
metadata:
  name: "openshift-worker-1"
  namespace: "test-cluster"
  annotations:
    helm.sh/hook-weight: "5"
  labels:
    nmstate-cluster: "worker"
spec:
  config:
    interfaces:
    - ipv4:
        dhcp: true
        enabled: true
      ipv6:
        enabled: false
      mac-address: bb:bb:bb:bb:bb:bb
      name: eno1
      state: up
      type: ethernet
  interfaces:
    - name: "eno1"
      macAddress: "bb:bb:bb:bb:bb:bb"
---
apiVersion: hypershift.openshift.io/v1beta1
kind: NodePool
metadata:
  name: "worker"
  namespace: "test-cluster"
  annotations:
    helm.sh/hook-weight: "25"
spec:
  clusterName: "test-cluster"
  release:
    image: "quay.io/openshift-release-dev/ocp-release:4.12.0-x86_64"
  replicas: 2
  management:
    upgradeType: InPlace
  platform:
    type: "Agent"
    agent:
      agentLabelSelector:
        matchLabels:
          infraenvs.agent-install.openshift.io: "worker"
  config:
    - name: configMap1
    - name: configMap2
---
apiVersion: batch/v1
kind: Job
metadata:
  name: patch-api-svc
  namespace: "test-cluster"
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-weight: "5"
spec:
  ttlSecondsAfterFinished: 600
  template:
    spec:
      serviceAccountName: hypershift-installer
      containers:
        - name: patch-api-svc
          image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:1fc458ece66c8d4184b45b5c495a372a96b47432ae5a39844cd5837e3981685b
          command:
            - bash
          args:
            - -c
            - |
              set -e
              
              # Wait for the API service to be available
              echo "Waiting for API service to be available..."
              oc wait --timeout=10m --for=condition=available service/kube-apiserver -n "test-cluster-test-cluster"
              
              # Get the MetalLB address pool name
              ADDRESS_POOL="test-cluster-api-address-pool"
              
              echo "Patching API service with MetalLB address pool: $ADDRESS_POOL"
              
              # Patch the service with MetalLB annotation
              oc patch service kube-apiserver \
                -n "test-cluster-test-cluster" \
                -p '{"metadata": {"annotations": {"metallb.universe.tf/address-pool": "'$ADDRESS_POOL'"}}}'
              
              echo "Successfully patched API service with MetalLB configuration"
              
              # Verify the patch was applied
              oc get service kube-apiserver -n "test-cluster-test-cluster" -o jsonpath='{.metadata.annotations.metallb\.universe\.tf/address-pool}'
              echo ""
          env:
            - name: KUBECONFIG
              value: "/secrets/kubeconfig"
          volumeMounts:
            - name: kubeconfig
              mountPath: "/secrets"
              readOnly: true
      restartPolicy: OnFailure
      volumes:
        - name: kubeconfig
          secret:
            secretName: "test-cluster-admin-kubeconfig"
