apiVersion: v1

# Additional parameters for disconnected clusters
#additionalTrustBundle: |
#  < certificate bundle >

#imageContentSources:
#  - mirrors:
#    - quay-mirror.example/openshift-release-dev/ocp-release
#    source: quay.io/openshift-release-dev/ocp-release

# Additional parameters for hypershift-helm
hypershift:
  osImageVersion: "4.12"
  clusterImageSet: quay.io/openshift-release-dev/ocp-release:4.12.0-x86_64 # Required
  additionalNTPSources: # Optional
    - pool.ntp.org
  clusterConfiguration: # Optional, see https://hypershift-docs.netlify.app/how-to/cluster-configuration/
  cliImage: mirror.example.com/openshift4/ose-cli:latest # Optional, may be needed in a disconnected environment. The Helm chart uses registry.redhat.io/openshift4/ose-cli:latest by default
  olmCatalogPlacement: "guest" # Optional, defaults to "management"
  customManifests:
    | # Optional, can be used to apply some manifests post-install. Below is an example of a custom catalog source
    apiVersion: operators.coreos.com/v1alpha1
    kind: CatalogSource
    metadata:
      name: redhat-operators
      namespace: openshift-marketplace
    spec:
      image: mirror.com:8443/redhat/redhat-operator-index:v4.16
      sourceType: grpc
  disableAllDefaultSources: true # Optional, defaults to false. Disables default catalog sources. olmCatalogPlacement must be set to "guest"
  nodePoolConfigs: # Optional, only required if you want to customize one of these values
    - name: worker
      configRefs: # Optional, see https://hypershift-docs.netlify.app/reference/api/#hypershift.openshift.io/v1beta1.NodePoolSpec
        - name: configMap1 # Needs to be pre-created, and should exist in a namespace called <cluster-name>
        - name: configMap2
      osImageVersion: "4.11"
      imageSet: quay.io/openshift-release-dev/ocp-release:4.11.0-x86_64 # Optional, will default to the value of clusterImageSet

# MetalLB Configuration
# Note: MetalLB must be deployed separately on the management cluster before deploying this chart
# The API VIP address will be automatically patched to use the MetalLB address pool
metallb:
  apiAddressPool: "<cluster-name>-api-address-pool" # Must match the MetalLB IPAddressPool name

# Pull Secret Configuration
# ExternalSecret is created by default - no configuration needed
# The chart will create an ExternalSecret that references your secret store

baseDomain: <cluster_domain>
compute:
  - name: worker # This will be the name of the NodePool that is created
    replicas: 2
metadata:
  name: <example_cluster_name>
networking:
  clusterNetwork:
    - cidr: 10.128.0.0/14
      hostPrefix: 23
  networkType: OVNKubernetes
  serviceNetwork:
    - 172.30.0.0/16
platform:
  baremetal:
    apiVIP: <api_address> # Should be in the same subnet as the management cluster
    ingressVIP: <ingress_address> # Should be in the same subnet as the hosted cluster worker nodes
    hosts:
      - name: openshift-worker-0
        role: worker # Should match the name of the NodePool
        bmc:
          address: "redfish-virtualmedia://<bmc_ip_address>/redfish/v1/Systems/1"
          # Option 1: Use ExternalSecret (recommended for production)
          credentialsName: "bmc-credentials"
          # Option 2: Use direct credentials (for testing only)
          # username: <username>
          # password: <password>
        bootMACAddress: <nic1_mac_address>
        rootDeviceHints:
          hctl: "1:0:0:0"
        networkConfig:
          interfaces:
            - name: eno1
              type: ethernet
              mac-address: <nic1_mac_address>
              state: up
              ipv4:
                enabled: true
                dhcp: true
              ipv6:
                enabled: false
      - name: openshift-worker-1
        role: worker # Should match the name of the NodePool
        bmc:
          address: "redfish-virtualmedia://<bmc_ip_address>/redfish/v1/Systems/1"
          # Option 1: Use ExternalSecret (recommended for production)
          credentialsName: "bmc-credentials"
          # Option 2: Use direct credentials (for testing only)
          # username: <username>
          # password: <password>
        bootMACAddress: <nic1_mac_address>
        rootDeviceHints:
          hctl: "2:0:0:0"
        networkConfig:
          interfaces:
            - name: eno1
              type: ethernet
              mac-address: <nic1_mac_address>
              state: up
              ipv4:
                enabled: true
                dhcp: true
              ipv6:
                enabled: false
pullSecret: "<pull secret>"
sshKey: |
  ssh-rsa ...
